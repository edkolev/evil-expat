(require 'ert)
(require 'evil)
(require 'evil-expat)
(require 'evil-test-helpers)

(require 'dired-aux) ;; needed for testing :rename in batch mode (which uses dired-rename-file)

(ert-deftest evil-expat-test ()
  (ert-info (":rev")
    (evil-test-buffer
     "<one\nt>wo\nthree"
     (":rev")
     "two\none\nthree"))
  (ert-info (":remove")
    (let ((temp-file (concat "/tmp/evil-expat-test-remove" (number-to-string (random)) ".txt")))
      (evil-test-buffer
       (find-file temp-file)
       (":w")
       (should (file-exists-p temp-file))
       (":remove")
       (should (not (file-exists-p temp-file))))))
  (ert-info (":rename new-file")
    (let ((temp-file1 (concat "/tmp/evil-expat-test-rename-1-" (number-to-string (random)) ".txt"))
          (temp-file2 (concat "/tmp/evil-expat-test-rename-2-" (number-to-string (random)) ".txt")))
      (evil-test-buffer
       (find-file temp-file1)
       (":w")
       (should (file-exists-p temp-file1))
       ((vconcat ":rename " temp-file2 [return]))
       (should (not (file-exists-p temp-file1)))
       (should (file-exists-p temp-file2)))))
  (ert-info (":rename new-dir")
    (let* ((temp-file-basename (concat "evil-expat-test-rename-1-" (number-to-string (random)) ".txt"))
           (temp-file-path (concat "/tmp/" temp-file-basename))
           (temp-dir (make-temp-file "evil-expat-tests" t))
           (expected-file-path (concat (file-name-as-directory temp-dir) temp-file-basename)))
      (evil-test-buffer
       (find-file temp-file-path)
       (":w")
       (should (file-exists-p temp-file-path))
       ((vconcat ":rename " temp-dir [return]))
       (should (not (file-exists-p temp-file-path)))
       (should (file-exists-p expected-file-path))))))
